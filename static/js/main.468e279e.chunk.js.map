{"version":3,"sources":["components/editor/editor.js","components/preview/preview.js","placeholder.js","components/main/main.js","App.js","serviceWorker.js","index.js"],"names":["Edit","props","className","name","onChange","defaultValue","content","id","cols","rows","type","text","marked","setOptions","breaks","renderer","Renderer","link","href","title","Preview","dangerouslySetInnerHTML","__html","placeholder","Main","state","handleChange","e","setState","target","value","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8WAkBeA,G,MAfF,SAAAC,GAAK,OAChB,yBAAKC,UAAU,oBACb,wBAAIA,UAAU,2BAAd,UACA,8BACEC,KAAK,GACLC,SAAUH,EAAMG,SAChBC,aAAcJ,EAAMK,QACpBC,GAAG,SACHC,KAAK,KACLC,KAAK,KACLC,MAAI,EACJC,MAAI,O,sBCVVC,IAAOC,WAAW,CAAEC,QAAQ,IAE5B,IAAMC,EAAW,IAAIH,IAAOI,SAE5BD,EAASE,KAAO,SAASC,EAAMC,EAAOR,GACpC,MAAM,4BAAN,OAAmCO,EAAnC,aAA4CP,EAA5C,cAGF,IAUeS,EAVC,SAAAnB,GAAK,OACnB,yBACEC,UAAU,oBACVK,GAAG,UACHc,wBAAyB,CACvBC,OAAQV,IAAOX,EAAMK,QAAS,CAAES,SAAUA,QCiBjCQ,EAlCE,0uBC4BFC,G,iNArBbC,MAAQ,CACNnB,QAASiB,G,EAGXG,aAAe,SAAAC,GACb,EAAKC,SAAS,CAAEtB,QAASqB,EAAEE,OAAOC,S,wEAIlC,OACE,oCACE,gCACE,sDAEF,kBAAC,EAAD,CAAM1B,SAAU2B,KAAKL,aAAcpB,QAASyB,KAAKN,MAAMnB,UACvD,kBAAC,EAAD,CAASA,QAASyB,KAAKN,MAAMnB,e,GAhBlB0B,cCMJC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.468e279e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./editor.scss\";\r\n\r\nconst Edit = props => (\r\n  <div className=\"editor-container\">\r\n    <h2 className=\"editor-container__title\">Editor</h2>\r\n    <textarea\r\n      name=\"\"\r\n      onChange={props.onChange}\r\n      defaultValue={props.content}\r\n      id=\"editor\"\r\n      cols=\"30\"\r\n      rows=\"30\"\r\n      type\r\n      text\r\n    />\r\n  </div>\r\n);\r\nexport default Edit;\r\n","import React from \"react\";\r\nimport marked from \"marked\";\r\nimport \"./preview.scss\";\r\n\r\nmarked.setOptions({ breaks: true });\r\n\r\nconst renderer = new marked.Renderer();\r\n\r\nrenderer.link = function(href, title, text) {\r\n  return `<a target=\"_blank\" href=\"${href}\">${text} + '</a>'`;\r\n};\r\n\r\nconst Preview = props => (\r\n  <div\r\n    className=\"preview-container\"\r\n    id=\"preview\"\r\n    dangerouslySetInnerHTML={{\r\n      __html: marked(props.content, { renderer: renderer })\r\n    }}\r\n  ></div>\r\n);\r\n\r\nexport default Preview;\r\n","const placeholder = `# Welcome to React Previewer!\r\n## Enjoy your work\r\n### Feel free to write here, change it,\r\nThis is, \\`<div>My code is amazing!</div\\`, simple code.\r\n\r\n\\`\\`\\` \r\n// Multi line code!\r\n\\`\\`\\`\r\n\r\nHere is also [My Git hub](https://github.com/KamilaDyn), and \r\n>Block Quotes!\r\n\r\nColumn1 | Column2 | Column3\r\n------------ | ---------- | ----------\r\nThis is | my | content \r\nGood! | Amazing! | Best\r\n\r\n\r\nDo you need **bold** text, just mae it **bold**\r\nOr maybe _italic_ . feel welcome to use it.\r\n\r\n-You can see list of items\r\n  -One item\r\n      -Second item\r\n        -third item\r\n\r\n1. If you need number of list, are here:\r\n1. Use number list as you need.\r\n\r\nAnd amazing image:\r\n\r\n![kittens!!!](https://media.giphy.com/media/Q94xQWspTUkShljj8P/source.gif)\r\n`;\r\n\r\nexport default placeholder;\r\n","import React, { Component } from \"react\";\r\nimport Edit from \"../editor/editor\";\r\nimport Preview from \"../preview/preview\";\r\nimport placeholder from \"../../placeholder\";\r\nimport \"./main.scss\";\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    content: placeholder\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({ content: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <header>\r\n          <h1>FCC - Markdown Viewer</h1>\r\n        </header>\r\n        <Edit onChange={this.handleChange} content={this.state.content} />\r\n        <Preview content={this.state.content} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/main/main\";\n\nfunction App() {\n  return (\n    <div>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}